from __future__ import annotations

import pandas as pd
import streamlit as st
from dataforge.db import get_connection
from dataforge.similarity_config import SimilarityScoringConfig
from dataforge.ui import setup_page

setup_page(title="DataForge ‚Äî –°—Ö–æ–∂–µ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–µ–∫ OZ", icon="üßπ")

st.title("üßπ –°—Ö–æ–∂–µ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–µ–∫ OZ")
st.caption("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ö–æ–∂–µ—Å—Ç–∏ –º–µ–∂–¥—É –¥–≤—É–º—è WB —Ç–æ–≤–∞—Ä–∞–º–∏ –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É –ø–æ—Ö–æ–∂–µ—Å—Ç–∏.")


def get_product_data(wb_sku: str, md_token: str | None = None, md_database: str | None = None) -> pd.DataFrame:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ wb_products –∏ punta_google."""
    try:
        with get_connection(md_token=md_token, md_database=md_database) as con:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ wb_products
            wb_query = """
            SELECT
                wb_sku,
                product_name,
                seller_category,
                brand,
                gender,
                color,
                primary_barcode,
                size,
                russian_size
            FROM wb_products
            WHERE wb_sku = ?
            """
            wb_df = con.execute(wb_query, [wb_sku]).fetch_df()

            if wb_df.empty:
                return pd.DataFrame()

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ punta_google (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            punta_data = {}
            try:
                punta_query = """
                SELECT
                    season,
                    color,
                    lacing_type,
                    material_short,
                    mega_last,
                    best_last,
                    new_last,
                    model_name
                FROM punta_google
                WHERE wb_sku = ?
                """
                punta_df = con.execute(punta_query, [wb_sku]).fetch_df()
                if not punta_df.empty:
                    punta_data = punta_df.iloc[0].to_dict()
            except Exception:
                # –¢–∞–±–ª–∏—Ü–∞ punta_google –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
                pass

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            result = wb_df.iloc[0].to_dict()
            result.update(punta_data)
            return pd.DataFrame([result])

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞: {e}")
        return pd.DataFrame()


def calculate_similarity_details(product_left: pd.Series, product_right: pd.Series) -> dict:
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ö–æ–∂–µ—Å—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ–≤–∞—Ä–∞–º–∏."""
    cfg = SimilarityScoringConfig()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
    left_data = product_left.to_dict()
    right_data = product_right.to_dict()

    details = {
        "parameters": [],
        "total_score": 0.0,
        "final_score": 0.0
    }

    # –ë–∞–∑–æ–≤—ã–π —Å–∫–æ—Ä
    base_score = cfg.base_score
    details["parameters"].append({
        "parameter": "–ë–∞–∑–æ–≤—ã–π —Å–∫–æ—Ä",
        "left_value": "‚Äî",
        "right_value": "‚Äî",
        "match": True,
        "score": base_score
    })

    total_score = base_score

    # –°–µ–∑–æ–Ω
    left_season = left_data.get("season")
    right_season = right_data.get("season")
    season_score = 0

    if left_season and right_season:
        season_score = cfg.season_match_bonus if left_season == right_season else cfg.season_mismatch_penalty
    elif left_season or right_season:
        # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–µ–∑–æ–Ω —É–∫–∞–∑–∞–Ω, –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ–º —à—Ç—Ä–∞—Ñ/–±–æ–Ω—É—Å
        season_score = 0

    details["parameters"].append({
        "parameter": "–°–µ–∑–æ–Ω",
        "left_value": left_season or "‚Äî",
        "right_value": right_season or "‚Äî",
        "match": left_season == right_season if left_season and right_season else None,
        "score": season_score
    })
    total_score += season_score

    # –¶–≤–µ—Ç (–∏–∑ punta_google)
    left_color = left_data.get("color")
    right_color = right_data.get("color")
    color_score = cfg.color_match_bonus if left_color and left_color == right_color else 0

    details["parameters"].append({
        "parameter": "–¶–≤–µ—Ç (Punta)",
        "left_value": left_color or "‚Äî",
        "right_value": right_color or "‚Äî",
        "match": left_color == right_color if left_color and right_color else None,
        "score": color_score
    })
    total_score += color_score

    # –ú–∞—Ç–µ—Ä–∏–∞–ª
    left_material = left_data.get("material_short")
    right_material = right_data.get("material_short")
    material_score = cfg.material_match_bonus if left_material and left_material == right_material else 0

    details["parameters"].append({
        "parameter": "–ú–∞—Ç–µ—Ä–∏–∞–ª",
        "left_value": left_material or "‚Äî",
        "right_value": right_material or "‚Äî",
        "match": left_material == right_material if left_material and right_material else None,
        "score": material_score
    })
    total_score += material_score

    # –ö—Ä–µ–ø–ª–µ–Ω–∏–µ
    left_fastener = left_data.get("lacing_type")
    right_fastener = right_data.get("lacing_type")
    fastener_score = cfg.fastener_match_bonus if left_fastener and left_fastener == right_fastener else 0

    details["parameters"].append({
        "parameter": "–ö—Ä–µ–ø–ª–µ–Ω–∏–µ",
        "left_value": left_fastener or "‚Äî",
        "right_value": right_fastener or "‚Äî",
        "match": left_fastener == right_fastener if left_fastener and right_fastener else None,
        "score": fastener_score
    })
    total_score += fastener_score

    # –ö–æ–ª–æ–¥–∫–∞
    left_mega = left_data.get("mega_last")
    left_best = left_data.get("best_last")
    left_new = left_data.get("new_last")
    right_mega = right_data.get("mega_last")
    right_best = right_data.get("best_last")
    right_new = right_data.get("new_last")

    last_score = 0
    last_match = False

    if left_mega and left_mega == right_mega:
        last_score = cfg.mega_last_bonus
        last_match = True
    elif left_best and left_best == right_best:
        last_score = cfg.best_last_bonus
        last_match = True
    elif left_new and left_new == right_new:
        last_score = cfg.new_last_bonus
        last_match = True

    last_left = left_mega or left_best or left_new or "‚Äî"
    last_right = right_mega or right_best or right_new or "‚Äî"

    details["parameters"].append({
        "parameter": "–ö–æ–ª–æ–¥–∫–∞",
        "left_value": last_left,
        "right_value": last_right,
        "match": last_match,
        "score": last_score
    })
    total_score += last_score

    # –ú–æ–¥–µ–ª—å
    left_model = left_data.get("model_name")
    right_model = right_data.get("model_name")
    model_score = cfg.model_match_bonus if left_model and left_model == right_model else 0

    details["parameters"].append({
        "parameter": "–ú–æ–¥–µ–ª—å",
        "left_value": left_model or "‚Äî",
        "right_value": right_model or "‚Äî",
        "match": left_model == right_model if left_model and right_model else None,
        "score": model_score
    })
    total_score += model_score

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —à—Ç—Ä–∞—Ñ –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–æ–¥–∫–∏
    adjusted_score = total_score * cfg.no_last_penalty_multiplier if last_score == 0 else total_score

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Å–∫–æ—Ä–æ–º
    final_score = min(cfg.max_score, adjusted_score)

    details["total_score"] = total_score
    details["final_score"] = final_score

    return details


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
md_token = st.session_state.get("md_token") or st.secrets.get("md_token") if hasattr(st, "secrets") else None
md_database = st.session_state.get("md_database") or st.secrets.get("md_database") if hasattr(st, "secrets") else None

if not md_token:
    st.warning("MD —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏.")


# –û—Å–Ω–æ–≤–Ω–æ–π UI
st.header("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤")

with st.form(key="similarity_compare_form"):
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("–¢–æ–≤–∞—Ä —Å–ª–µ–≤–∞")
        wb_sku_left = st.text_input(
            "WB SKU —Ç–æ–≤–∞—Ä–∞ —Å–ª–µ–≤–∞",
            value=st.session_state.get("similarity_wb_sku_left", ""),
            key="similarity_wb_sku_left",
            help="–í–≤–µ–¥–∏—Ç–µ WB SKU –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"
        )

    with col2:
        st.subheader("–¢–æ–≤–∞—Ä —Å–ø—Ä–∞–≤–∞")
        wb_sku_right = st.text_input(
            "WB SKU —Ç–æ–≤–∞—Ä–∞ —Å–ø—Ä–∞–≤–∞",
            value=st.session_state.get("similarity_wb_sku_right", ""),
            key="similarity_wb_sku_right",
            help="–í–≤–µ–¥–∏—Ç–µ WB SKU –≤—Ç–æ—Ä–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"
        )

    submitted = st.form_submit_button("–°—Ä–∞–≤–Ω–∏—Ç—å", type="primary")

if submitted:
    if not md_token:
        st.error("MD —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏.")
        st.stop()

    wb_sku_left_val = wb_sku_left.strip() if wb_sku_left else ""
    wb_sku_right_val = wb_sku_right.strip() if wb_sku_right else ""

    if not wb_sku_left_val or not wb_sku_right_val:
        st.error("–í–≤–µ–¥–∏—Ç–µ –æ–±–∞ WB SKU –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        st.stop()

    if wb_sku_left_val == wb_sku_right_val:
        st.error("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–Ω—ã–µ WB SKU –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        st.stop()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
    with st.spinner("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤..."):
        left_data = get_product_data(wb_sku_left_val, md_token, md_database)
        right_data = get_product_data(wb_sku_right_val, md_token, md_database)

    if left_data.empty:
        st.error(f"–¢–æ–≤–∞—Ä —Å WB SKU {wb_sku_left_val} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        st.stop()

    if right_data.empty:
        st.error(f"–¢–æ–≤–∞—Ä —Å WB SKU {wb_sku_right_val} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        st.stop()

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å
    similarity_details = calculate_similarity_details(left_data.iloc[0], right_data.iloc[0])

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    st.success("‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")

    # Side-by-side –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("üè∑Ô∏è –¢–æ–≤–∞—Ä —Å–ª–µ–≤–∞")
        product_info = left_data.iloc[0]
        st.markdown(f"**WB SKU:** {product_info.get('wb_sku', '‚Äî')}")
        st.markdown(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {product_info.get('product_name', '‚Äî')}")
        st.markdown(f"**–ë—Ä–µ–Ω–¥:** {product_info.get('brand', '‚Äî')}")
        st.markdown(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {product_info.get('seller_category', '‚Äî')}")
        st.markdown(f"**–ü–æ–ª:** {product_info.get('gender', '‚Äî')}")
        st.markdown(f"**–¶–≤–µ—Ç (WB):** {product_info.get('color', '‚Äî')}")
        st.markdown(f"**–†–∞–∑–º–µ—Ä:** {product_info.get('size', '‚Äî')} / {product_info.get('russian_size', '‚Äî')}")

    with col2:
        st.subheader("üè∑Ô∏è –¢–æ–≤–∞—Ä —Å–ø—Ä–∞–≤–∞")
        product_info = right_data.iloc[0]
        st.markdown(f"**WB SKU:** {product_info.get('wb_sku', '‚Äî')}")
        st.markdown(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {product_info.get('product_name', '‚Äî')}")
        st.markdown(f"**–ë—Ä–µ–Ω–¥:** {product_info.get('brand', '‚Äî')}")
        st.markdown(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {product_info.get('seller_category', '‚Äî')}")
        st.markdown(f"**–ü–æ–ª:** {product_info.get('gender', '‚Äî')}")
        st.markdown(f"**–¶–≤–µ—Ç (WB):** {product_info.get('color', '‚Äî')}")
        st.markdown(f"**–†–∞–∑–º–µ—Ä:** {product_info.get('size', '‚Äî')} / {product_info.get('russian_size', '‚Äî')}")

    # –¢–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    st.subheader("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ö–æ–∂–µ—Å—Ç–∏")

    comparison_data = []
    for param in similarity_details["parameters"]:
        status = ""
        if param["match"] is True:
            status = "‚úÖ –°–æ–≤–ø–∞–¥–∞–µ—Ç"
        elif param["match"] is False:
            status = "‚ùå –ù–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"
        else:
            status = "‚ûñ –ù–µ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç—Å—è"

        comparison_data.append({
            "–ü–∞—Ä–∞–º–µ—Ç—Ä": param["parameter"],
            "–¢–æ–≤–∞—Ä —Å–ª–µ–≤–∞": param["left_value"],
            "–¢–æ–≤–∞—Ä —Å–ø—Ä–∞–≤–∞": param["right_value"],
            "–°—Ç–∞—Ç—É—Å": status,
            "–ë–∞–ª–ª—ã": f"{param['score']:+.0f}"
        })

    comparison_df = pd.DataFrame(comparison_data)
    st.dataframe(comparison_df, width='stretch', hide_index=True)

    # –ò—Ç–æ–≥–æ–≤—ã–π —Å–∫–æ—Ä —Å—Ö–æ–∂–µ—Å—Ç–∏
    st.subheader("üéØ –ò—Ç–æ–≥–æ–≤—ã–π —Å–∫–æ—Ä —Å—Ö–æ–∂–µ—Å—Ç–∏")

    col_score1, col_score2, col_score3 = st.columns(3)

    with col_score1:
        st.metric("–°—ã—Ä–æ–π —Å–∫–æ—Ä", f"{similarity_details['total_score']:.1f}")

    with col_score2:
        st.metric("–°–∫–æ—Ä —Å —à—Ç—Ä–∞—Ñ–∞–º–∏", f"{similarity_details['final_score']:.1f}")

    with col_score3:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å—Ö–æ–∂–µ—Å—Ç–∏
        final_score = similarity_details['final_score']
        if final_score >= 400:
            level = "–í—ã—Å–æ–∫–∞—è"
            color = "üü¢"
        elif final_score >= 250:
            level = "–°—Ä–µ–¥–Ω—è—è"
            color = "üü°"
        else:
            level = "–ù–∏–∑–∫–∞—è"
            color = "üî¥"
        st.metric("–£—Ä–æ–≤–µ–Ω—å —Å—Ö–æ–∂–µ—Å—Ç–∏", f"{color} {level}")