from __future__ import annotations

from collections.abc import Generator, Iterable
from typing import Any

import pandas as pd
import streamlit as st
from dataforge.db import get_connection
from dataforge.ui import setup_page

setup_page(title="DataForge", icon="üõ†Ô∏è")

st.title("üìä –û–±–∑–æ—Ä MotherDuck")
st.caption(
    "–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ MotherDuck –≤ —Ç–µ–∫—É—â–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
)


def _sget(key: str) -> str | None:
    try:
        return st.secrets[key]  # type: ignore[index]
    except Exception:
        return None


md_token = st.session_state.get("md_token") or _sget("md_token")
md_database = st.session_state.get("md_database") or _sget("md_database")

if not md_token:
    st.warning("MD —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏.")
    st.stop()


@st.cache_data(ttl=60)
def load_database_size(
    *, md_token: str | None, md_database: str | None
) -> pd.DataFrame:
    with get_connection(md_token=md_token, md_database=md_database) as con:
        return con.execute("PRAGMA database_size;").fetch_df()


def friendly_label(key: str) -> str:
    labels: dict[str, str] = {
        "database_name": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö",
        "database_size": "–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä",
        "storage_bytes": "–û–±—ä—ë–º —Ö—Ä–∞–Ω–µ–Ω–∏—è",
        "total_blocks": "–í—Å–µ–≥–æ –±–ª–æ–∫–æ–≤",
        "free_blocks": "–°–≤–æ–±–æ–¥–Ω—ã–µ –±–ª–æ–∫–∏",
        "used_blocks": "–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –±–ª–æ–∫–∏",
        "block_size": "–†–∞–∑–º–µ—Ä –±–ª–æ–∫–∞",
        "wal_size": "–†–∞–∑–º–µ—Ä WAL",
        "memory_usage": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏",
        "freelist": "–°–≤–æ–±–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫",
        "schema_name": "–°—Ö–µ–º–∞",
        "total_entries": "–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π",
        "compression_ratio": "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∂–∞—Ç–∏—è",
        "timestamp": "–ú–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏",
    }
    return labels.get(key, key.replace("_", " ").capitalize())


def humanize_bytes(value: float) -> str:
    units = ["–ë", "–ö–ë", "–ú–ë", "–ì–ë", "–¢–ë", "–ü–ë"]
    val = float(value)
    for unit in units:
        if abs(val) < 1024 or unit == units[-1]:
            return f"{val:.0f} {unit}" if unit == "–ë" else f"{val:.1f} {unit}"
        val /= 1024
    return f"{val:.1f} –ü–ë"


def format_value(key: str, value: Any) -> str:
    if value is None:
        return "‚Äî"

    if isinstance(value, int | float):
        if key.endswith("_ratio"):
            return f"{float(value):.2f}"

        if any(key.endswith(suffix) for suffix in ("_size", "_bytes", "_usage")):
            return humanize_bytes(float(value))

        if isinstance(value, int) or float(value).is_integer():
            return f"{int(value):,}".replace(",", " ")
        return f"{float(value):,.2f}".replace(",", " ")

    return str(value)


def chunked(values: Iterable[dict[str, str]], size: int) -> Generator[list[dict[str, str]], None, None]:
    bucket: list[dict[str, str]] = []
    for item in values:
        bucket.append(item)
        if len(bucket) == size:
            yield bucket
            bucket = []
    if bucket:
        yield bucket


try:
    stats_df = load_database_size(md_token=md_token, md_database=md_database)
except Exception as exc:  # noqa: BLE001
    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É MotherDuck: {exc}")
    st.stop()

if stats_df.empty:
    st.info("–ó–∞–ø—Ä–æ—Å PRAGMA database_size –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–π –±–∞–∑—ã.")
    st.stop()

record = stats_df.iloc[0].to_dict()

metrics = [
    {
        "label": friendly_label(key),
        "value": format_value(key, value),
    }
    for key, value in record.items()
]

st.subheader("–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
for group in chunked(metrics, 3):
    cols = st.columns(len(group))
    for col, metric in zip(cols, group, strict=False):
        col.metric(metric["label"], metric["value"])

formatted_rows = [
    {
        "–ü–∞—Ä–∞–º–µ—Ç—Ä": friendly_label(key),
        "–ó–Ω–∞—á–µ–Ω–∏–µ": format_value(key, value),
        "–°—ã—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä": key,
        "–°—ã—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ": value,
    }
    for key, value in record.items()
]

st.subheader("–î–µ—Ç–∞–ª–∏ PRAGMA database_size")
st.dataframe(
    pd.DataFrame(formatted_rows),
    width="stretch",
    hide_index=True,
)
