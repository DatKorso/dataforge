import streamlit as st

from dataforge.collections import (
    list_punta_collections,
    ensure_punta_collection,
    reorder_punta_collections,
)


st.title("üóÇ –ö–æ–ª–ª–µ–∫—Ü–∏–∏ (Punta)")
st.caption("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –∫–æ–ª–ª–µ–∫—Ü–∏–π –∏ –∏—Ö –ø–æ—Ä—è–¥–∫–æ–º (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º).")


def _sget(key: str) -> str | None:
    try:
        return st.secrets[key]  # type: ignore[index]
    except Exception:
        return None


md_token = st.session_state.get("md_token") or _sget("md_token")
md_database = st.session_state.get("md_database") or _sget("md_database")


@st.cache_data(ttl=10)
def _load_colls(md_token: str | None, md_database: str | None):
    try:
        df = list_punta_collections(md_token=md_token, md_database=md_database)
    except Exception:
        df = None
    return df


def _refresh():
    _load_colls.clear()  # type: ignore[attr-defined]


# Create new collection
with st.expander("–°–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é", expanded=False):
    new_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏", key="_new_coll_name")
    col_a, col_b = st.columns([1, 3])
    with col_a:
        if st.button("–°–æ–∑–¥–∞—Ç—å") and new_name.strip():
            try:
                name, pr = ensure_punta_collection(
                    new_name.strip(), md_token=md_token, md_database=md_database
                )
                st.success(f"–°–æ–∑–¥–∞–Ω–æ: {name} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç {pr})")
                _refresh()
            except Exception as exc:  # noqa: BLE001
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å: {exc}")


df = _load_colls(md_token, md_database)
if df is None or df.empty:
    st.info("–ö–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –≤—ã—à–µ.")
    st.stop()


st.subheader("–ü–æ—Ä—è–¥–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π")
names = df["collection"].astype(str).tolist()

new_order: list[str] | None = None

# Try drag-n-drop via streamlit-sortables, fallback to editor
used_drag = False
try:
    from streamlit_sortables import sort_items  # type: ignore

    st.caption("–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ (drag‚Äën‚Äëdrop).")
    sorted_items = sort_items(names, direction="vertical", key="punta_collections_sort")
    if isinstance(sorted_items, list) and len(sorted_items) == len(names):
        new_order = [str(x) for x in sorted_items]
        used_drag = True
except Exception:
    used_drag = False

if not used_drag:
    st.caption(
        "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç drag‚Äën‚Äëdrop –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –≤—Ä—É—á–Ω—É—é –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø–æ—Ä—è–¥–æ–∫."
    )
    editable = df[["collection", "priority"]].copy()
    editable = st.data_editor(
        editable,
        key="punta_coll_editor",
        hide_index=True,
        use_container_width=True,
    )
    # Sort by edited priority, then by name for stability
    editable = editable.sort_values(["priority", "collection"], ascending=[True, True])
    new_order = editable["collection"].astype(str).tolist()


col_save, col_refresh = st.columns([1, 1])
with col_save:
    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫") and new_order:
        try:
            reorder_punta_collections(new_order, md_token=md_token, md_database=md_database)
            st.success("–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
            _refresh()
        except Exception as exc:  # noqa: BLE001
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {exc}")
with col_refresh:
    if st.button("–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫"):
        _refresh()

