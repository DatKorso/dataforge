from __future__ import annotations

import pandas as pd
import streamlit as st
from dataforge.campaign_selection import select_campaign_candidates
from dataforge.ui import setup_page

setup_page(title="DataForge", icon="üõ†Ô∏è")

st.title("üéØ –ü–æ–¥–±–æ—Ä –†–ö –¥–ª—è Ozon")
st.caption(
    "–ü–æ–¥–±–æ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ WB. "
    "–°–∏—Å—Ç–µ–º–∞ –Ω–∞—Ö–æ–¥–∏—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã Ozon —Å —É—á–µ—Ç–æ–º –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ –∑–∞–∫–∞–∑–æ–≤."
)


def _sget(key: str) -> str | None:
    """–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ secrets —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∫–ª—é—á–∞."""
    try:
        return st.secrets[key]  # type: ignore[index]
    except KeyError:
        return None


def parse_input(text: str) -> list[str]:
    """–†–∞–∑–±–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏: –ø—Ä–æ–±–µ–ª—ã, –ø–µ—Ä–µ–Ω–æ—Å—ã, –∑–∞–ø—è—Ç—ã–µ)."""
    tokens = [t.strip() for t in text.replace(",", " ").split()]
    return [t for t in tokens if t]


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
md_token = st.session_state.get("md_token") or _sget("md_token")
md_database = st.session_state.get("md_database") or _sget("md_database")

if not md_token:
    st.warning("‚ö†Ô∏è MD —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏.")
    st.stop()

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
margin_defaults = {
    "commission_percent": 36.0,
    "acquiring_percent": 0.0,
    "advertising_percent": 3.0,
    "vat_percent": 20.0,
    "exchange_rate": 90.0,
}


def _get_margin_setting(key: str) -> float:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –º–∞—Ä–∂–∏ –∏–∑ session_state –∏–ª–∏ secrets, —Ä–∞–∑–ª–∏—á–∞—è 0.0 –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è."""
    if key in st.session_state:
        try:
            return float(st.session_state[key])
        except Exception:
            pass
    val = _sget(key)
    if val is not None:
        try:
            return float(val)
        except Exception:
            pass
    return float(margin_defaults[key])


commission_percent = _get_margin_setting("commission_percent")
acquiring_percent = _get_margin_setting("acquiring_percent")
advertising_percent = _get_margin_setting("advertising_percent")
vat_percent = _get_margin_setting("vat_percent")
exchange_rate = _get_margin_setting("exchange_rate")

# --- –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ---
st.subheader("üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–±–æ—Ä–∞")

wb_skus_input = st.text_area(
    "–ê—Ä—Ç–∏–∫—É–ª—ã WB (wb_sku)",
    placeholder="123456789\n987654321\n...",
    height=150,
    help="–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª—ã WB —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏",
)

col1, col2, col3 = st.columns(3)
with col1:
    min_stock = st.number_input(
        "Min –æ—Å—Ç–∞—Ç–æ–∫",
        min_value=0,
        value=5,
        help="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –ø–æ–¥–±–æ—Ä",
    )
with col2:
    min_candidates = st.number_input(
        "Min –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤",
        min_value=1,
        value=1,
        help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ (–∏–Ω–∞—á–µ –≥—Ä—É–ø–ø–∞ –∏—Å–∫–ª—é—á–∞–µ—Ç—Å—è)",
    )
with col3:
    max_candidates = st.number_input(
        "Max –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤",
        min_value=1,
        value=10,
        help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ –æ–¥–Ω—É –≥—Ä—É–ø–ø—É",
    )

search_btn = st.button("üîç –ü–æ–¥–±–æ—Ä", type="primary")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ ---
if search_btn:
    wb_skus = parse_input(wb_skus_input)

    if not wb_skus:
        st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞—Ä—Ç–∏–∫—É–ª WB")
    elif min_candidates > max_candidates:
        st.error("‚ùå Min –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ Max –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
    else:
        with st.spinner("üîÑ –ü–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤..."):
            try:
                results = select_campaign_candidates(
                    wb_skus=wb_skus,
                    min_stock=min_stock,
                    min_candidates=min_candidates,
                    max_candidates=max_candidates,
                    commission_percent=commission_percent,
                    acquiring_percent=acquiring_percent,
                    advertising_percent=advertising_percent,
                    vat_percent=vat_percent,
                    exchange_rate=exchange_rate,
                    md_token=md_token,
                    md_database=md_database,
                )

                if results:
                    df = pd.DataFrame(results)

                    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è UI
                    df_display = df.rename(
                        columns={
                            "group_number": "‚Ññ –≥—Ä—É–ø–ø—ã",
                            "wb_sku": "–ê—Ä—Ç–∏–∫—É–ª WB",
                            "oz_sku": "–ê—Ä—Ç–∏–∫—É–ª OZ",
                            "oz_vendor_code": "–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ OZ",
                            "gender": "–ü–æ–ª",
                            "season": "–°–µ–∑–æ–Ω",
                            "material_short": "–ú–∞—Ç–µ—Ä–∏–∞–ª",
                            "item_type": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
                            "size_stock": "–û—Å—Ç–∞—Ç–æ–∫ —Ä–∞–∑–º–µ—Ä–∞",
                            "model_stock": "–û—Å—Ç–∞—Ç–æ–∫ –º–æ–¥–µ–ª–∏",
                            "size_orders": "–ó–∞–∫–∞–∑—ã —Ä–∞–∑–º–µ—Ä–∞ (14–¥)",
                            "model_orders": "–ó–∞–∫–∞–∑—ã –º–æ–¥–µ–ª–∏ (14–¥)",
                            "oz_price": "–¶–µ–Ω–∞ OZ (‚ÇΩ)",
                            "cost_usd": "–°–µ–±–µ—Å—Ç-—Ç—å ($)",
                            "margin_percent": "–ú–∞—Ä–∂–∞ (%)",
                        }
                    )

                    # –ü–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫: –º–∞—Ä–∂–∞ –≤ –∫–æ–Ω—Ü–µ
                    column_order = [
                        "‚Ññ –≥—Ä—É–ø–ø—ã",
                        "–ê—Ä—Ç–∏–∫—É–ª WB",
                        "–ê—Ä—Ç–∏–∫—É–ª OZ",
                        "–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ OZ",
                        "–ü–æ–ª",
                        "–°–µ–∑–æ–Ω",
                        "–ú–∞—Ç–µ—Ä–∏–∞–ª",
                        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
                        "–û—Å—Ç–∞—Ç–æ–∫ —Ä–∞–∑–º–µ—Ä–∞",
                        "–û—Å—Ç–∞—Ç–æ–∫ –º–æ–¥–µ–ª–∏",
                        "–ó–∞–∫–∞–∑—ã —Ä–∞–∑–º–µ—Ä–∞ (14–¥)",
                        "–ó–∞–∫–∞–∑—ã –º–æ–¥–µ–ª–∏ (14–¥)",
                        "–¶–µ–Ω–∞ OZ (‚ÇΩ)",
                        "–°–µ–±–µ—Å—Ç-—Ç—å ($)",
                        "–ú–∞—Ä–∂–∞ (%)",
                    ]
                    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–ª–æ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ –µ—Å—Ç—å –≤ df_display
                    column_order = [col for col in column_order if col in df_display.columns]
                    df_display = df_display[column_order]

                    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä–∂–∏ —Å 2 –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                    if "–ú–∞—Ä–∂–∞ (%)" in df_display.columns:
                        df_display["–ú–∞—Ä–∂–∞ (%)"] = df_display["–ú–∞—Ä–∂–∞ (%)"].apply(
                            lambda x: f"{x:.2f}" if pd.notna(x) else "‚Äî"
                        )

                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
                    unique_groups = df["group_number"].nunique()
                    st.success(
                        f"‚úÖ –ù–∞–π–¥–µ–Ω–æ **{len(results)}** –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ **{unique_groups}** –≥—Ä—É–ø–ø–∞—Ö"
                    )

                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º
                    st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º")
                    group_stats = (
                        df.groupby("wb_sku")
                        .agg(
                            {
                                "oz_vendor_code": "count",
                                "size_stock": "sum",
                                "size_orders": "sum",
                                "model_stock": "first",
                                "model_orders": "first",
                            }
                        )
                        .rename(
                            columns={
                                "oz_vendor_code": "–ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤",
                                "size_stock": "–°—É–º–º–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö",
                                "size_orders": "–°—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö",
                                "model_stock": "–û—Å—Ç–∞—Ç–æ–∫ –º–æ–¥–µ–ª–∏",
                                "model_orders": "–ó–∞–∫–∞–∑—ã –º–æ–¥–µ–ª–∏",
                            }
                        )
                    )
                    st.dataframe(group_stats, width="stretch")

                    # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    st.markdown("### üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥–±–æ—Ä–∞")
                    st.dataframe(df_display, width="stretch", height=400)

                    # –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
                    csv = df_display.to_csv(index=False).encode("utf-8")
                    st.download_button(
                        label="üì• –°–∫–∞—á–∞—Ç—å CSV",
                        data=csv,
                        file_name="campaign_candidates.csv",
                        mime="text/csv",
                    )

                else:
                    st.info(
                        "‚ÑπÔ∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º. "
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–±–æ—Ä–∞."
                    )

            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–±–æ—Ä–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {e}")
                st.exception(e)
