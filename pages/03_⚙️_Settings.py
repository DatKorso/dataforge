from __future__ import annotations

import time

import streamlit as st
from dataforge.db import check_connection, get_connection
from dataforge.schema import init_schema, rebuild_indexes, rebuild_punta_products_codes
from dataforge.secrets import load_secrets, save_secrets
from dataforge.ui import setup_page

setup_page(title="DataForge", icon="üõ†Ô∏è")
st.title("‚öôÔ∏è Settings")

# --- MotherDuck configuration ---
st.subheader("MotherDuck")
st.caption("–£–∫–∞–∂–∏—Ç–µ MD —Ç–æ–∫–µ–Ω –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")

existing = load_secrets()

def _secret_from_streamlit(key: str) -> str | None:
    try:
        # st.secrets behaves like a dict; use indexing to avoid relying on .get
        return st.secrets[key]  # type: ignore[index]
    except Exception:
        return None

# –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ –∏–Ω–ø—É—Ç, —á—Ç–æ–±—ã –µ–≥–æ –Ω–µ–ª—å–∑—è –±—ã–ª–æ —É–≤–∏–¥–µ—Ç—å
# (–¥–∞–∂–µ –≤ —Å–∫—Ä—ã—Ç–æ–º –ø–æ–ª–µ). –ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω —Ç–æ–ª—å–∫–æ –∫–∞–∫
# –Ω–µ–≤–∏–¥–∏–º—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –¥–µ–π—Å—Ç–≤–∏—è—Ö.
_stored_md_token = (
    st.session_state.get("md_token")
    or _secret_from_streamlit("md_token")
    or existing.get("md_token", "")
)
default_db = (
    st.session_state.get("md_database")
    or _secret_from_streamlit("md_database")
    or existing.get("md_database", "")
)

md_token_input = st.text_input(
    "MD —Ç–æ–∫–µ–Ω",
    value="",
    type="password",
    placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω (–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è)",
)
effective_md_token = md_token_input or _stored_md_token
md_database = st.text_input("MD –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", value=default_db, placeholder="my_database")

cols = st.columns(2)
with cols[0]:
    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ secrets.toml"):
        # Persist MD creds and brand filter in secrets for convenience
        save_secrets(
            {
                # –ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω (save_secrets –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç None)
                "md_token": (md_token_input or None),
                "md_database": md_database,
                "brand_whitelist": st.session_state.get("brand_whitelist", ""),
            }
        )
        if md_token_input:
            st.session_state["md_token"] = md_token_input
        st.session_state["md_database"] = md_database
        st.success("–°–µ–∫—Ä–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ .streamlit/secrets.toml")

with cols[1]:
    if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"):
        with st.spinner("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MotherDuck..."):
            ok, msg = check_connection(
                md_token=(effective_md_token or None),
                md_database=(md_database or None),
            )
        if ok:
            st.success(msg)
        else:
            st.error(msg)

st.divider()
st.subheader("–°—Ö–µ–º–∞ –ë–î")
st.caption("–°—Ö–µ–º–∞ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–∞ –≤ –∫–æ–¥–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è.")

cols2 = st.columns(2)
with cols2[0]:
    if st.button("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ö–µ–º—É –ë–î"):
        with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü (–µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç)..."):
            msgs = init_schema(
                md_token=(effective_md_token or None),
                md_database=(md_database or None),
            )
        st.success("–í—ã–ø–æ–ª–Ω–µ–Ω–æ:")
        for m in msgs:
            st.write(f"‚Ä¢ {m}")

st.divider()
st.subheader("–§–∏–ª—å—Ç—Ä –±—Ä–µ–Ω–¥–æ–≤")
st.caption(
    "–£–∫–∞–∂–∏—Ç–µ –±—Ä–µ–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤–µ–¥—ë—Ç–µ. –ü—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Å —ç—Ç–∏–º–∏ –±—Ä–µ–Ω–¥–∞–º–∏. "
    "–°–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä: Nike; Puma; Adidas"
)

# Read persisted value or session state
_brand_default = (
    st.session_state.get("brand_whitelist")
    or _secret_from_streamlit("brand_whitelist")
    or existing.get("brand_whitelist", "")
)
brand_text = st.text_input("–°–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥–æ–≤", value=_brand_default)
st.session_state["brand_whitelist"] = brand_text

with cols2[1]:
    if st.button("–ü–µ—Ä–µ—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã"):
        with st.spinner("–ü–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü..."):
            msgs = rebuild_indexes(
                md_token=(effective_md_token or None),
                md_database=(md_database or None),
            )
        st.success("–í—ã–ø–æ–ª–Ω–µ–Ω–æ:")
        for m in msgs:
            st.write(f"‚Ä¢ {m}")

st.divider()
st.subheader("Punta")
st.caption("–†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å–≤—è–∑–∫–∏ external_code ‚Üî –ø—Ä–æ–¥—É–∫—Ç—ã Punta.")

if st.button("–û–±–Ω–æ–≤–∏—Ç—å —Å–≤—è–∑–∫—É Punta"):
    try:
        t0 = time.perf_counter()
        with st.spinner("–ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ punta_products_codes..."):
            msgs = rebuild_punta_products_codes(
                md_token=(effective_md_token or None),
                md_database=(md_database or None),
            )
        dt = time.perf_counter() - t0

        # –ü–æ–¥—Å—á—ë—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã (—Å—Ç—Ä–æ–∫ –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö external_code)
        rows = codes = None
        try:
            with get_connection(
                md_token=(effective_md_token or None),
                md_database=(md_database or None),
            ) as con:
                stats = con.execute(
                    "SELECT COUNT(*) AS rows, COUNT(DISTINCT external_code) AS codes FROM punta_products_codes"
                ).fetch_df()
                if not stats.empty:
                    rows = int(stats.loc[0, "rows"]) if stats.loc[0, "rows"] is not None else None
                    codes = int(stats.loc[0, "codes"]) if stats.loc[0, "codes"] is not None else None
        except Exception:
            pass

        st.success(
            f"–ì–æ—Ç–æ–≤–æ –∑–∞ {dt:.2f} c. "
            + (f"–°—Ç—Ä–æ–∫: {rows}. –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö external_code: {codes}." if rows is not None and codes is not None else "")
        )
        if rows and rows > 1_000_000:
            st.warning("–†–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã >1 –º–ª–Ω —Å—Ç—Ä–æ–∫ ‚Äî –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–≥—Ä—É–∑–∫—É –∏ –∏–Ω–¥–µ–∫—Å—ã.")
        if msgs:
            with st.expander("–õ–æ–≥–∏ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏"):
                for m in msgs:
                    st.write(f"‚Ä¢ {m}")
    except Exception as exc:  # noqa: BLE001
        st.exception(exc)
