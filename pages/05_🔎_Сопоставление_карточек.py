from __future__ import annotations

import io
from typing import List, Optional

import pandas as pd
import streamlit as st

from dataforge.ui import setup_page
from dataforge.matching import search_matches


setup_page(title="DataForge", icon="üõ†Ô∏è")
st.title("üîé –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –∫–∞—Ä—Ç–æ—á–µ–∫ (Ozon ‚Üî WB)")
st.caption(
    "–ù–∞–π–¥–∏—Ç–µ –æ–±—â–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –º–µ–∂–¥—É –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º–∏ –ø–æ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞–º. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –º–∞—Å—Å–æ–≤—ã–π –≤–≤–æ–¥."
)


def _sget(key: str) -> Optional[str]:
    try:
        return st.secrets[key]  # type: ignore[index]
    except Exception:
        return None


md_token = st.session_state.get("md_token") or _sget("md_token")
md_database = st.session_state.get("md_database") or _sget("md_database")

if not md_token:
    st.warning("MD —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏.")


def parse_input(text: str) -> List[str]:
    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ª—é–±—ã–º –ø—Ä–æ–±–µ–ª–∞–º –∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º —Å—Ç—Ä–æ–∫–∏; —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ
    tokens = [t.strip() for t in text.replace(",", " ").split()]  # –∑–∞–ø—è—Ç—ã–µ —Ç–æ–∂–µ —Å—á–∏—Ç–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
    return [t for t in tokens if t]


DEFAULT_COLUMNS = [
    "oz_sku",
    "oz_vendor_code",
    "oz_primary_barcode",
    "wb_sku",
    "wb_primary_barcode",
    "wb_size",
    "oz_is_primary_hit",
    "wb_is_primary_hit",
    "barcode_hit",
    "matched_by",
    "match_score",
]

ALL_COLUMNS = [
    # OZ
    "oz_sku",
    "oz_vendor_code",
    "oz_product_name",
    "oz_russian_size",
    "oz_brand",
    "oz_color",
    "oz_primary_barcode",
    # WB
    "wb_sku",
    "wb_article",
    "wb_brand",
    "wb_color",
    "wb_size",
    "wb_primary_barcode",
    # Match
    "oz_is_primary_hit",
    "wb_is_primary_hit",
    "barcode_hit",
    "matched_by",
    "match_score",
]


with st.form(key="mp_match_form"):
    col1, col2 = st.columns([1, 1])
    with col1:
        input_type = st.selectbox(
            "–¢–∏–ø –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
            options=[
                ("–ê—Ä—Ç–∏–∫—É–ª Ozon (oz_sku)", "oz_sku"),
                ("–ê—Ä—Ç–∏–∫—É–ª WB (wb_sku)", "wb_sku"),
                ("–®—Ç—Ä–∏—Ö–∫–æ–¥", "barcode"),
                ("–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ Ozon (oz_vendor_code)", "oz_vendor_code"),
            ],
            format_func=lambda x: x[0],
        )[1]

    with col2:
        limit_per_input = st.number_input(
            "–õ–∏–º–∏—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (0 ‚Äî –±–µ–∑ –ª–∏–º–∏—Ç–∞)",
            min_value=0,
            max_value=10000,
            value=int(st.session_state.get("limit_per_input", 0)),
        )

    text_value = st.text_area(
        "–ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞",
        value=st.session_state.get("mp_input_text", ""),
        height=140,
        help=(
            "–í—Å—Ç–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. "
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è 10‚Äì300+ –∑–Ω–∞—á–µ–Ω–∏–π."
        ),
    )

    selected_cols = st.multiselect(
        "–ü–æ–ª—è –¥–ª—è –≤—ã–≤–æ–¥–∞",
        options=ALL_COLUMNS,
        default=st.session_state.get("mp_selected_cols", DEFAULT_COLUMNS),
        help="–ú–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –Ω–∞–±–æ—Ä –∫–æ–ª–æ–Ω–æ–∫ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.",
    )

    submitted = st.form_submit_button("–ù–∞–π—Ç–∏", type="primary")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–ø—É—Ç–æ–≤
    st.session_state["mp_input_text"] = text_value
    st.session_state["mp_selected_cols"] = selected_cols
    st.session_state["limit_per_input"] = int(limit_per_input)

if submitted:
    values = parse_input(text_value)
    if not values:
        st.warning("–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞.")
        st.stop()

    if len(values) > 300:
        st.info(
            f"–ü–µ—Ä–µ–¥–∞–Ω–æ {len(values)} –∑–Ω–∞—á–µ–Ω–∏–π. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
        )

    try:
        with st.spinner("–ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π..."):
            df_res = search_matches(
                values,
                input_type=input_type,
                limit_per_input=(None if int(limit_per_input) <= 0 else int(limit_per_input)),
                md_token=md_token,
                md_database=md_database,
            )
        st.session_state["mp_match_result"] = df_res
    except Exception as exc:  # noqa: BLE001
        st.exception(exc)


df_show: pd.DataFrame = st.session_state.get("mp_match_result", pd.DataFrame())

if df_show.empty:
    st.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ ‚Äò–ù–∞–π—Ç–∏‚Äô.")
    st.stop()

# –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–ª–æ–Ω–∫–∏ (–µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º)
cols_to_show = [c for c in st.session_state.get("mp_selected_cols", DEFAULT_COLUMNS) if c in df_show.columns]
if not cols_to_show:
    cols_to_show = [c for c in DEFAULT_COLUMNS if c in df_show.columns]

st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
m1, m2 = st.columns(2)
with m1:
    st.metric("–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫", len(df_show))
with m2:
    st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤", df_show["barcode_hit"].nunique() if "barcode_hit" in df_show else 0)

st.dataframe(df_show[cols_to_show], width="stretch", height=600)

csv_buf = io.StringIO()
df_show[cols_to_show].to_csv(csv_buf, index=False)
st.download_button(
    "–°–∫–∞—á–∞—Ç—å CSV",
    data=csv_buf.getvalue().encode("utf-8"),
    file_name="mp_matches.csv",
    mime="text/csv",
)
