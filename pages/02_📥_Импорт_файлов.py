from __future__ import annotations

import io
from pathlib import Path
from typing import Any, Dict, Optional

import pandas as pd
import streamlit as st

from dataforge.ui import setup_page
from dataforge.imports.loader import load_dataframe
from dataforge.imports.assemblers import (
    assemble_ozon_products_full,
    assemble_wb_products,
    assemble_wb_prices,
)
from dataforge.imports.reader import read_any
from dataforge.imports.registry import ReportSpec, get_registry
from dataforge.imports.validator import ValidationResult, normalize_and_validate


setup_page(title="DataForge", icon="üõ†Ô∏è")
st.title("üì• –ò–º–ø–æ—Ä—Ç —Ñ–∞–π–ª–æ–≤")
st.caption(
    "–ó–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ö–∞–± –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü –ë–î. –î–æ–±–∞–≤–ª—è–π—Ç–µ –æ—Ç—á—ë—Ç—ã –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ –∏ –∑–∞–≥—Ä—É–∂–∞–π—Ç–µ –≤ MotherDuck."
)

REGISTRY = get_registry()
SPEC_OPTIONS = {spec.name: spec.id for spec in REGISTRY.values()}

report_name = st.selectbox("–¢–∏–ø –æ—Ç—á—ë—Ç–∞", options=list(SPEC_OPTIONS.keys()))
report_id = SPEC_OPTIONS[report_name]
spec: ReportSpec = REGISTRY[report_id]

st.info(spec.description)

uploaded = st.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª(—ã) –æ—Ç—á—ë—Ç–∞",
    type=spec.allowed_extensions,
    accept_multiple_files=spec.multi_file,
    help=(
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è .csv –∏ .xlsx (Excel). –î–ª—è –ø–æ–ª–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ Ozon –¥–æ–ø—É—Å—Ç–∏–º–∞ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤."
    ),
)


def _arrow_safe(df: pd.DataFrame) -> pd.DataFrame:
    """Sanitize a DataFrame to avoid Arrow serialization issues in Streamlit.

    - For object columns, convert bytes/bytearray to UTF-8 strings
    - Cast mixed-type object columns to strings, preserving NaN as None
    """
    if df is None or df.empty:
        return df
    out = df.copy()
    for c in out.columns:
        s = out[c]
        if s.dtype == object:
            def _to_str(x: Any) -> Any:
                if x is None or (isinstance(x, float) and pd.isna(x)):
                    return None
                if isinstance(x, (bytes, bytearray)):
                    try:
                        return x.decode("utf-8", errors="replace")
                    except Exception:
                        return str(x)
                if isinstance(x, str):
                    return x
                return str(x)

            out[c] = s.map(_to_str)
    return out

with st.expander("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–º–ø–æ—Ä—Ç–∞", expanded=False):
    col1, col2, col3 = st.columns(3)
    with col1:
        delim_label = st.selectbox(
            "–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (CSV)",
            options=["–ê–≤—Ç–æ", "–ó–∞–ø—è—Ç–∞—è ,", "–¢–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π ;", "–¢–∞–±—É–ª—è—Ü–∏—è \t"],
            index=0,
        )
    with col2:
        encoding = st.selectbox("–ö–æ–¥–∏—Ä–æ–≤–∫–∞", options=["utf-8", "cp1251", "auto"], index=0)
    with col3:
        header_row = st.number_input("–°—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤", min_value=1, value=spec.header_row + 1)

    clear_table = st.checkbox(
        "–û—á–∏—â–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π",
        value=True,
        help="–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç –ø–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤)",
    )

def _ext_from_name(name: str) -> str:
    return Path(name).suffix.lstrip(".").lower()


def _delimiter_value(label: str) -> Optional[str]:
    if label.startswith("–ê–≤—Ç–æ"):
        return None
    if "," in label:
        return ","
    if ";" in label:
        return ";"
    if "\t" in label:
        return "\t"
    return None


MAX_SIZE = 200 * 1024 * 1024  # 200MB

preview_col, import_col = st.columns([1, 1])

has_files = False
if spec.multi_file:
    has_files = isinstance(uploaded, list) and len(uploaded) > 0
else:
    has_files = uploaded is not None

if has_files:
    size = getattr(uploaded, "size", None)
    if spec.multi_file:
        total_size = sum(getattr(f, "size", 0) or 0 for f in uploaded)
        if total_size > MAX_SIZE:
            st.error("–°—É–º–º–∞—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º 200MB.")
        else:
            st.write(f"–í—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(uploaded)}; —Å—É–º–º–∞—Ä–Ω–æ {total_size} –±–∞–π—Ç")
    else:
        if size and size > MAX_SIZE:
            st.error("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä 200MB.")
        else:
            st.write(f"–§–∞–π–ª: {uploaded.name} ‚Äî {size or 0} –±–∞–π—Ç")

    with preview_col:
        if st.button("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è", type="primary"):
            try:
                if spec.assembler:
                    with st.spinner("–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞(–æ–≤)..."):
                        if spec.assembler == "ozon_products_full":
                            df_src = assemble_ozon_products_full(uploaded)
                        elif spec.assembler == "wb_products":
                            df_src = assemble_wb_products(uploaded)
                        elif spec.assembler == "wb_prices":
                            files = uploaded if isinstance(uploaded, list) else [uploaded]
                            df_src = assemble_wb_prices(files)
                        else:
                            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–±–æ—Ä—â–∏–∫ –¥–ª—è –æ—Ç—á—ë—Ç–∞: {spec.assembler}")
                else:
                    ext = _ext_from_name(uploaded.name)
                    delimiter = _delimiter_value(delim_label)
                    enc = None if encoding == "auto" else encoding
                    with st.spinner("–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞..."):
                        df_src = read_any(
                            uploaded, ext, delimiter=delimiter, encoding=enc, header_row=int(header_row) - 1
                        )

                st.session_state["last_src_preview"] = df_src.head(5)
                st.dataframe(_arrow_safe(df_src.head(10)), width="stretch")

                with st.spinner("–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è..."):
                    vr: ValidationResult = normalize_and_validate(df_src, spec)

                st.session_state["norm_df"] = vr.df_normalized
                st.session_state["norm_errors"] = vr.errors

                st.subheader("–°–≤–æ–¥–∫–∞")
                m1, m2, m3 = st.columns(3)
                m1.metric("–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫", vr.rows_total)
                m2.metric("–í–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫", vr.rows_valid)
                m3.metric("–û—à–∏–±–æ–∫", len(vr.errors))

                if vr.errors:
                    st.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏. –°—Ç—Ä–æ–∫–∏ —Å –æ—à–∏–±–∫–∞–º–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ.")
                    st.dataframe(_arrow_safe(pd.DataFrame(vr.errors)), width="stretch")

                st.subheader("–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø—Ä–µ–≤—å—é)")
                st.dataframe(_arrow_safe(vr.df_normalized.head(20)), width="stretch")

                csv_buf = io.StringIO()
                vr.df_normalized.to_csv(csv_buf, index=False)
                st.download_button(
                    "–°–∫–∞—á–∞—Ç—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π CSV",
                    data=csv_buf.getvalue().encode("utf-8"),
                    file_name=f"{spec.table}_normalized.csv",
                    mime="text/csv",
                )
            except Exception as exc:  # noqa: BLE001
                st.exception(exc)

    with import_col:
        if st.button("–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –ë–î", disabled="norm_df" not in st.session_state):
            try:
                df_ready: pd.DataFrame = st.session_state.get("norm_df", pd.DataFrame())
                if df_ready.empty:
                    st.error("–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä.")
                else:
                    def _sget(key: str) -> Optional[str]:
                        try:
                            return st.secrets[key]  # type: ignore[index]
                        except Exception:
                            return None

                    md_token = st.session_state.get("md_token") or _sget("md_token")
                    md_database = st.session_state.get("md_database") or _sget("md_database")
                    if not md_token:
                        st.warning("MD —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏.")

                    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –≤ MotherDuck..."):
                        msg = load_dataframe(
                            df_ready,
                            table=spec.table,
                            md_token=md_token,
                            md_database=md_database,
                            replace=clear_table,
                        )
                    st.success(msg)
            except Exception as exc:  # noqa: BLE001
                st.exception(exc)

else:
    st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
