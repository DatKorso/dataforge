"""
Attributes mapping editor page.

This page allows users to manage attribute mappings between Punta products
and various marketplaces (Wildberries, Ozon, Lamoda).
"""

from __future__ import annotations

from datetime import datetime

import pandas as pd
import streamlit as st
from dataforge.attributes import (
    CATEGORY_COLUMNS,
    CATEGORY_NAMES,
    export_attributes_to_excel,
    get_attributes_by_category,
    get_next_id_for_category,
    import_unique_values_from_punta,
    merge_with_existing_mappings,
    save_category_mappings,
)
from dataforge.ui import setup_page

setup_page(title="–†–µ–¥–∞–∫—Ç–æ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫", icon="‚úèÔ∏è")

st.title("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–æ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")
st.caption(
    "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç–æ–≤–∞—Ä–æ–≤ –º–µ–∂–¥—É Punta –∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º–∏ (–í–ë, Ozon, Lamoda)."
)


def _sget(key: str) -> str | None:
    """Get secret value safely."""
    try:
        return st.secrets[key]  # type: ignore[index]
    except Exception:
        return None


# Get credentials
md_token = st.session_state.get("md_token") or _sget("md_token")
md_database = st.session_state.get("md_database") or _sget("md_database")

# Export button at the top
col_export, col_info = st.columns([1, 4])
with col_export:
    if st.button("üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", width="stretch"):
        try:
            excel_file = export_attributes_to_excel(md_token=md_token, md_database=md_database)
            st.download_button(
                label="üíæ –°–∫–∞—á–∞—Ç—å Excel",
                data=excel_file,
                file_name=f"attributes_mapping_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                width="stretch",
            )
        except Exception as exc:
            st.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {exc}")

with col_info:
    st.info(
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∫–ª–∞–¥–∫–∏ –Ω–∏–∂–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π. "
        "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ **–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è**."
    )

st.divider()

# Create tabs for each category
tabs = st.tabs([CATEGORY_NAMES[cat] for cat in CATEGORY_NAMES])

for tab_idx, (category_key, category_name) in enumerate(CATEGORY_NAMES.items()):
    with tabs[tab_idx]:
        st.subheader(f"üìã {category_name}")
        
        # Show import button for material categories
        material_categories = ["upper_material", "lining_material", "insole_material", "outsole_material"]
        if category_key in material_categories:
            col_import, col_spacer = st.columns([2, 3])
            with col_import:
                if st.button(
                    f"üì• –ò–º–ø–æ—Ä—Ç –∏–∑ Punta",
                    key=f"import_{category_key}",
                    width="stretch",
                    help="–ó–∞–≥—Ä—É–∑–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã punta_products",
                ):
                    try:
                        # Import unique values
                        new_values = import_unique_values_from_punta(
                            category_key,
                            md_token=md_token,
                            md_database=md_database,
                        )
                        
                        if new_values.empty:
                            st.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ punta_products")
                        else:
                            # Load existing to compute how many will be added
                            existing_before = get_attributes_by_category(
                                category_key, md_token=md_token, md_database=md_database
                            )

                            # Merge with existing (function will deduplicate and reassign IDs)
                            merged_df = merge_with_existing_mappings(
                                category_key,
                                new_values,
                                md_token=md_token,
                                md_database=md_database,
                            )

                            # Save merged data
                            save_category_mappings(
                                category_key,
                                merged_df,
                                md_token=md_token,
                                md_database=md_database,
                            )

                            added_count = len(merged_df) - len(existing_before)
                            total_count = len(merged_df)
                            st.success(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {added_count} –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π. –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_count}")
                            st.rerun()
                    except Exception as exc:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {exc}")
            st.divider()
        
        # Get column configuration for this category
        column_config = CATEGORY_COLUMNS.get(category_key, {})
        
        # Load data
        try:
            df = get_attributes_by_category(
                category_key,
                md_token=md_token,
                md_database=md_database,
            )
        except Exception as exc:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {exc}")
            continue
        
        # Prepare columns for editing
        edit_columns = ["id", "punta_value", "wb_value", "oz_value", "lamoda_value"]
        
        # Add optional columns based on configuration
        if column_config.get("additional_field"):
            edit_columns.append("additional_field")
        if column_config.get("description"):
            edit_columns.append("description")
        
        # Prepare DataFrame with proper types
        if df.empty:
            # Create empty DataFrame with correct dtypes
            dtype_dict = {col: "object" if col != "id" else "int64" for col in edit_columns}
            df = pd.DataFrame(columns=edit_columns).astype(dtype_dict)
        else:
            # Ensure all required columns exist
            for col in edit_columns:
                if col not in df.columns:
                    df[col] = None
            df = df[edit_columns].copy()
            # Convert all non-id columns to object type for proper text editing
            for col in df.columns:
                if col != "id":
                    df[col] = df[col].astype("object")
        
        # Configure column display names
        column_display_config = {
            "id": st.column_config.NumberColumn(
                "ID",
                help="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏",
                disabled=False,
                required=True,
                min_value=1,
                step=1,
            ),
            "punta_value": st.column_config.TextColumn(
                column_config.get("punta_value", "Punta"),
                help="–ó–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Punta",
                max_chars=200,
            ),
            "wb_value": st.column_config.TextColumn(
                column_config.get("wb_value", "Wildberries"),
                help="–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è Wildberries",
                max_chars=200,
            ),
            "oz_value": st.column_config.TextColumn(
                column_config.get("oz_value", "Ozon"),
                help="–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è Ozon",
                max_chars=200,
            ),
            "lamoda_value": st.column_config.TextColumn(
                column_config.get("lamoda_value", "Lamoda"),
                help="–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è Lamoda",
                max_chars=200,
            ),
        }
        
        # Add optional columns to config
        if "additional_field" in edit_columns:
            column_display_config["additional_field"] = st.column_config.TextColumn(
                column_config.get("additional_field", "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ"),
                help="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ",
                max_chars=200,
            )
        if "description" in edit_columns:
            column_display_config["description"] = st.column_config.TextColumn(
                column_config.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ"),
                help="–û–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ",
                max_chars=500,
            )
        
        # Data editor
        edited_df = st.data_editor(
            df,
            column_config=column_display_config,
            num_rows="dynamic",
            width="stretch",
            key=f"editor_{category_key}",
            hide_index=True,
        )
        
        # Action buttons
        col_save, col_add, col_clear = st.columns([2, 2, 1])
        
        with col_save:
            if st.button(
                "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è",
                key=f"save_{category_key}",
                width="stretch",
                type="primary",
            ):
                try:
                    # Validate IDs are unique and positive
                    if edited_df["id"].isna().any():
                        st.error("‚ùå –í—Å–µ –∑–∞–ø–∏—Å–∏ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å ID")
                    elif edited_df["id"].duplicated().any():
                        st.error("‚ùå ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏")
                    elif (edited_df["id"] <= 0).any():
                        st.error("‚ùå ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏")
                    else:
                        # Save to database
                        save_category_mappings(
                            category_key,
                            edited_df,
                            md_token=md_token,
                            md_database=md_database,
                        )
                        st.success(f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                        st.rerun()
                except Exception as exc:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {exc}")
        
        with col_add:
            if st.button(
                "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É",
                key=f"add_{category_key}",
                width="stretch",
            ):
                try:
                    next_id = get_next_id_for_category(
                        category_key,
                        md_token=md_token,
                        md_database=md_database,
                    )
                    st.info(f"üí° –°–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π ID: {next_id}")
                except Exception as exc:
                    st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π ID: {exc}")
        
        with col_clear:
            if st.button(
                "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å",
                key=f"clear_{category_key}",
                width="stretch",
            ):
                if st.session_state.get(f"confirm_clear_{category_key}", False):
                    try:
                        # Save empty dataframe to clear the category
                        empty_df = pd.DataFrame(columns=edit_columns)
                        save_category_mappings(
                            category_key,
                            empty_df,
                            md_token=md_token,
                            md_database=md_database,
                        )
                        st.success(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –æ—á–∏—â–µ–Ω–∞")
                        st.session_state[f"confirm_clear_{category_key}"] = False
                        st.rerun()
                    except Exception as exc:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {exc}")
                else:
                    st.session_state[f"confirm_clear_{category_key}"] = True
                    st.warning("‚ö†Ô∏è –ù–∞–∂–º–∏—Ç–µ –µ—â—ë —Ä–∞–∑ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        
        # Display current row count
        st.caption(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(edited_df)}")
        
        st.divider()

# Help section
with st.expander("‚ùì –°–ø—Ä–∞–≤–∫–∞"):
    st.markdown("""
    ### –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    
    1. **–ù–∞–≤–∏–≥–∞—Ü–∏—è**: –ü–µ—Ä–µ–∫–ª—é—á–∞–π—Ç–µ—Å—å –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Å –ø–æ–º–æ—â—å—é –≤–∫–ª–∞–¥–æ–∫
    2. **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ**: 
       - –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —è—á–µ–π–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
       - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ **‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É** –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
       - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ **üóëÔ∏è –£–¥–∞–ª–∏—Ç—å** –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
    3. **–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ**: –ù–∞–∂–º–∏—Ç–µ **üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è** –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    4. **–≠–∫—Å–ø–æ—Ä—Ç**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É **üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel** –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –≤—Å–µ–≥–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
    
    ### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    
    - **–ú–∞—Ç–µ—Ä–∏–∞–ª –≤–µ—Ä—Ö–∞**: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤–µ—Ä—Ö–∞ –æ–±—É–≤–∏
    - **–ú–∞—Ç–µ—Ä–∏–∞–ª –ø–æ–¥–∫–ª–∞–¥–∫–∏**: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ–¥–∫–ª–∞–¥–∫–∏
    - **–ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–ª—å–∫–∏**: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å—Ç–µ–ª—å–∫–∏
    - **–ú–∞—Ç–µ—Ä–∏–∞–ª –ø–æ–¥–æ—à–≤—ã**: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ–¥–æ—à–≤—ã
    - **–°–µ–∑–æ–Ω**: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ (–∑–∏–º–∞, –ª–µ—Ç–æ, –¥–µ–º–∏—Å–µ–∑–æ–Ω)
    - **–ü–æ–ª**: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –ø–æ–ª–∞ (–º—É–∂—Å–∫–æ–π, –∂–µ–Ω—Å–∫–∏–π, —É–Ω–∏—Å–µ–∫—Å)
    - **–ü—Ä–µ–¥–º–µ—Ç**: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è —Ç–∏–ø–æ–≤ –æ–±—É–≤–∏ (–±–æ—Ç–∏–Ω–∫–∏, —Ç—É—Ñ–ª–∏, –∫—Ä–æ—Å—Å–æ–≤–∫–∏)
    - **–¶–≤–µ—Ç**: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è —Ü–≤–µ—Ç–æ–≤
    - **–ó–∞—Å—Ç–µ–∂–∫–∞**: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è —Ç–∏–ø–æ–≤ –∑–∞—Å—Ç–µ–∂–µ–∫
    - **–ö–∞–±–ª—É–∫**: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è —Ç–∏–ø–æ–≤ –∫–∞–±–ª—É–∫–æ–≤
    
    ### –í–∞–∂–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
    
    - ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –≤ —Ä–∞–º–∫–∞—Ö –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    - –ü—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è (–µ—Å–ª–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–∞ –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞)
    - –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ **–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è**
    """)
